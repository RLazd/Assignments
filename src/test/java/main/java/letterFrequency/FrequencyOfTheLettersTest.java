package main.java.letterFrequency;

import letterFrequency.FrequencyOfTheLetters;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class FrequencyOfTheLettersTest {
    @Test
    public void shouldCountLetterBEqualTo20() throws IOException, URISyntaxException {
        // GIVEN - a file with 20 b characters
        FrequencyOfTheLetters frequency = new FrequencyOfTheLetters();
        String content = "b".repeat(20);
        String fileName = "b.txt";
        Path path = Paths.get(FrequencyOfTheLetters.class.getResource(frequency.PATH_BEGINNING + fileName).toURI());
        Files.write(Paths.get(path.toUri()), content.getBytes());

        // WHEN - function generateFrequencyVocabulary is given the file
        Map<Character, Integer> occurrencesByLetter = frequency.generateFrequencyVocabulary(fileName);

        // THEN - it should return a map containing B=20
        Assertions.assertEquals(20, occurrencesByLetter.get('B'), "B letters not counted correctly");
        Assertions.assertEquals(0, occurrencesByLetter.get('A'));
    }

    @Test
    public void shouldCountLetterInTextOfMoreThan1000Words() throws IOException, URISyntaxException {
        // GIVEN - a file with 2108 words
        FrequencyOfTheLetters frequency = new FrequencyOfTheLetters();
        String fileName = "text.txt";

        // WHEN - function generateFrequencyVocabulary is given the file
        Map<Character, Integer> occurrencesByLetter = frequency.generateFrequencyVocabulary(fileName);

        // THEN - values from map generated by generateFrequencyVocabulary function should be equal to given Integer array
        Integer[] values = occurrencesByLetter.values().toArray(new Integer[0]);
        Integer[] array = new Integer[]{819, 150, 306, 447, 1159, 181, 217, 606, 698, 15, 90, 352, 211, 695, 795, 162, 6, 596, 668, 884, 293, 99, 222, 24, 165, 15};
        assertEquals(Arrays.toString(array), Arrays.toString(values));

    }
}